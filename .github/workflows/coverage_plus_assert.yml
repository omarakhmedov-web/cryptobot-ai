name: Coverage (plus, assert aggressive)
on:
  workflow_dispatch:
    inputs:
      app_module:
        description: "WSGI app module (module:object)"
        required: false
        default: "server:app"
      bind:
        description: "Gunicorn bind address"
        required: false
        default: "127.0.0.1:8000"
      python-version:
        description: "Python version"
        required: false
        default: "3.11"
      run_smoke:
        description: "Run optional smoke _render_report() if present"
        required: false
        default: "true"
      healthz:
        description: "Health check path (relative)"
        required: false
        default: "/healthz"
  push:
    branches: ["**"]

permissions:
  contents: read

jobs:
  run-coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      APP_MODULE: ${{ inputs.app_module != '' && inputs.app_module || 'server:app' }}
      BIND_ADDR: ${{ inputs.bind != '' && inputs.bind || '127.0.0.1:8000' }}
      PY_VER: ${{ inputs['python-version'] != '' && inputs['python-version'] || '3.11' }}
      RUN_SMOKE: ${{ inputs.run_smoke != '' && inputs.run_smoke || 'true' }}
      HEALTHZ_PATH: ${{ inputs.healthz != '' && inputs.healthz || '/healthz' }}
      TELEGRAM_TOKEN: "ci-dummy"
      WEBHOOK_SECRET: "ci"
      WEBHOOK_HEADER_SECRET: "ci"
      SITE_URL: "http://127.0.0.1:8000"
      DB_PATH: "/tmp/metridex_ci.db"

    steps:
      - name: Checkout (selected branch)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 2

      - name: Show server candidates
        run: |
          echo ">>> pwd"
          pwd
          echo ">>> LS at repo root"
          ls -la
          echo ">>> Find server* (maxdepth 2)"
          find . -maxdepth 2 -iname "server*"

      - name: Assert AGGRESSIVE server is in use
        run: |
          python - << 'PY'
          import importlib, pathlib, hashlib, sys, re
          try:
              m = importlib.import_module('server')
          except Exception as e:
              print("::error::import server failed:", e)
              sys.exit(1)
          p = pathlib.Path(m.__file__)
          data = p.read_bytes()
          txt = data.decode("utf-8", errors="ignore")
          nlines = txt.count("\n") + 1
          markers = len(re.findall(r'\[REMOVED_UNUSED_FUNCTION:', txt))
          sha256 = hashlib.sha256(data).hexdigest()
          print("server module path:", p)
          print("line count:", nlines)
          print("sha256:", sha256)
          print("removed markers:", markers)
          # Агрессивный сервер должен быть заметно меньше 7000 строк и иметь достаточно маркеров
          if nlines >= 7000 or markers < 10:
              print("::error::Not using AGGRESSIVE trimmed server.py (lines>=7000 or too few markers)")
              sys.exit(1)
          PY

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - name: Install deps (best effort)
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt || true
          fi
          pip install "coverage==7.*" gunicorn flask requests || true

      - name: Start app (gunicorn under coverage, background)
        run: |
          set -eu
          APP_MODULE="${APP_MODULE:-server:app}"
          BIND_ADDR="${BIND_ADDR:-127.0.0.1:8000}"
          echo "Starting gunicorn for ${APP_MODULE} on ${BIND_ADDR}..."
          nohup coverage run --parallel-mode -m gunicorn -w 1 -t 120 "${APP_MODULE}" --bind "${BIND_ADDR}" >/dev/null 2>&1 &
          for i in $(seq 1 15); do
            sleep 1
            if curl -fsS "http://${BIND_ADDR%:*}:${BIND_ADDR#*:}${HEALTHZ_PATH}" >/dev/null 2>&1; then
              echo "Health OK"
              break
            fi
          done
          true

      - name: Optional smoke render (if _render_report exists)
        if: ${{ env.RUN_SMOKE == 'true' }}
        run: |
          python - << 'PY'
          import importlib, os, sys
          modname = os.environ.get("APP_MODULE","server:app").split(":")[0]
          try:
            m = importlib.import_module(modname)
          except Exception as e:
            print(f"[smoke] import failed: {e}")
            sys.exit(0)
          func = getattr(m, "_render_report", None)
          if callable(func):
            try:
              html = func({})
              print("[smoke] _render_report executed, len(html)=", len(str(html)))
            except Exception as e:
              print(f"[smoke] _render_report raised (ignored): {e}")
          else:
            print("[smoke] _render_report not present — skipping")
          PY

      - name: Stop app
        if: always()
        run: |
          pkill -f gunicorn || true

      - name: Combine & report
        if: always()
        run: |
          coverage combine || true
          echo "::group::coverage report -m"
          coverage report -m || true
          echo "::endgroup::"
          coverage xml || true
          coverage html -d htmlcov || true

      - name: Upload HTML coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov
          if-no-files-found: warn

      - name: Upload coverage XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn
