# server.py
import os
import re
from flask import Flask, request
import telegram
from openai import OpenAI

app = Flask(__name__)

# --- ENV ---
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
PORT = int(os.environ.get("PORT", 10000))

# --- Clients ---
bot = telegram.Bot(token=TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# --- Helpers ---

def detect_lang(text: str) -> str:
    """
    –ì—Ä—É–±–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ISO-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–¥—ë—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
    """
    t = text.strip()
    if not t:
        return "en"
    # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    if any("\u0400" <= ch <= "\u04FF" for ch in t):
        return "ru"
    # –ö–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
    if any("\u4e00" <= ch <= "\u9fff" for ch in t):
        return "zh"
    # –ê—Ä–∞–±—Å–∫–∞—è –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç—å
    if any("\u0600" <= ch <= "\u06FF" for ch in t):
        return "ar"
    # –ò—Å–ø–∞–Ω—Å–∫–∏–π/–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π/—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —Ö–∞–∫ —á–µ—Ä–µ–∑ –±—É–∫–≤—ã —Å –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–æ–π
    if re.search(r"[√°√©√≠√≥√∫√±√º√†√®√¨√≤√π√¢√™√Æ√¥√ª√ß]", t.lower()):
        return "es"
    return "en"

SYSTEM_PROMPT = (
    "You are CryptoGuard ‚Äî a Telegram assistant.\n"
    "Capabilities (Web3 & Safety):\n"
    "- Token/coin due diligence checklists: contract red flags (mint/pause/blacklist/upgradeability), "
    "holders distribution, liquidity/locks, audits, deployer history.\n"
    "- Website & social checks (Twitter/X, Discord, Zealy), team transparency, roadmap sanity.\n"
    "- Explain wallets, bridges, DeFi, L1/L2, gas, risks. Provide clear, actionable safety steps.\n"
    "- Never promise profits. Add risk reminders when user asks about investments.\n"
    "Language policy: Detect the user's language and reply in that language. "
    "Keep answers concise unless asked for details."
)

WELCOME = {
    "en": (
        "Hi! I‚Äôm CryptoGuard. I can analyze tokens and websites, spot common Web3 red flags, "
        "and explain DeFi in simple terms. Ask me anything. üöÄ"
    ),
    "ru": (
        "–ü—Ä–∏–≤–µ—Ç! –Ø CryptoGuard. –ü–æ–º–æ–≥–∞—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ —Å–∞–π—Ç—ã, –∑–∞–º–µ—á–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ Web3-—Ä–∏—Å–∫–∏ "
        "–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ–±—ä—è—Å–Ω—è—é DeFi. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ. üöÄ"
    ),
    "es": (
        "¬°Hola! Soy CryptoGuard. Puedo analizar tokens y sitios, detectar riesgos comunes de Web3 "
        "y explicar DeFi de forma sencilla. Preg√∫ntame lo que quieras. üöÄ"
    ),
    "zh": "‰Ω†Â•ΩÔºÅÊàëÊòØ CryptoGuard„ÄÇÂèØ‰ª•ÂàÜÊûê‰ª£Â∏ÅÂíåÁΩëÁ´ôÔºåÂèëÁé∞Â∏∏ËßÅ Web3 È£éÈô©ÔºåÂπ∂Áî®ÁÆÄÂçïÁöÑËØùËß£Èáä DeFi„ÄÇÂ∞ΩÁÆ°Êù•ÈóÆ„ÄÇüöÄ",
    "ar": "ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ŸÜÿß CryptoGuard. ÿ£ÿ≥ÿ™ÿ∑Ÿäÿπ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ™ŸàŸÉŸÜÿßÿ™ ŸàÿßŸÑŸÖŸàÿßŸÇÿπÿå ÿßŸÉÿ™ÿ¥ÿßŸÅ ŸÖÿÆÿßÿ∑ÿ± Web3 ÿßŸÑÿ¥ÿßÿ¶ÿπÿ©ÿå Ÿàÿ¥ÿ±ÿ≠ DeFi ÿ®ÿ®ÿ≥ÿßÿ∑ÿ©. ÿßÿ≥ÿ£ŸÑŸÜŸä ÿ£Ÿä ÿ¥Ÿäÿ°. üöÄ",
}

def greet(lang: str) -> str:
    return WELCOME.get(lang, WELCOME["en"])

# --- Routes ---

@app.route("/")
def root():
    return "Bot is running!"

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json(silent=True) or {}
    msg = data.get("message") or {}
    chat = (msg.get("chat") or {}).get("id")
    text = msg.get("text") or ""

    if not chat:
        return "ok"

    # /start ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text.strip().lower() in ("/start", "start"):
        lang = detect_lang(text)
        bot.send_message(chat_id=chat, text=greet(lang))
        return "ok"

    # –ê–≤—Ç–æ—è–∑—ã–∫
    lang = detect_lang(text)

    messages = [
        {"role": "system", "content": f"{SYSTEM_PROMPT}\nUserLanguage: {lang}"},
        {"role": "user", "content": text},
    ]

    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            messages=messages,
            temperature=0.4,
        )
        reply = (resp.choices[0].message.content or "").strip()
        if not reply:
            reply = greet(lang)
    except Exception as e:
        reply = f"Error: {e}"

    bot.send_message(chat_id=chat, text=reply)
    return "ok"

if __name__ == "__main__":
    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è gunicorn)
    app.run(host="0.0.0.0", port=PORT)
