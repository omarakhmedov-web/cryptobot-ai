import os
from flask import Flask, request
from telegram import Bot
from groq import Groq

app = Flask(__name__)

# ==== ENV ====
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
GROQ_API_KEY   = os.environ["GROQ_API_KEY"]
PORT           = int(os.environ.get("PORT", 10000))

# ==== CLIENTS (–í–ê–ñ–ù–û: –±–µ–∑ proxies, –±–µ–∑ session) ====
bot    = Bot(token=TELEGRAM_TOKEN)
client = Groq(api_key=GROQ_API_KEY)

# ---- –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É) ----
def detect_lang(text: str) -> str:
    if not text:
        return "en"
    t = text.strip().lower()
    # –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    if any('–∞' <= ch <= '—è' or ch == '—ë' for ch in t):
        return "ru"
    # –∞—Ä–∞–±—Å–∫–∞—è –≤—è–∑—å
    if any('\u0600' <= ch <= '\u06FF' for ch in t):
        return "ar"
    # –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
    if any('\u4e00' <= ch <= '\u9fff' for ch in t):
        return "zh"
    # —Ç—É—Ä–µ—Ü–∫–∏–µ –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏
    if any(ch in "√ßƒüƒ±√∂≈ü√º" for ch in t):
        return "tr"
    return "en"

# ==== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï ====
WELCOME = {
    "en": (
        "üëã Hi! I'm <b>CryptoGuard</b>.\n\n"
        "I can: \n"
        "‚Ä¢ sanity-check smart contracts & tokens (read-only)\n"
        "‚Ä¢ scan socials (Twitter/X, Discord) & GitHub activity\n"
        "‚Ä¢ flag common Web3 red flags (honeypot signs, fake mints, admin risks)\n"
        "‚Ä¢ explain risks in plain language and link to sources\n\n"
        "Send a token address/CA, website or question."
    ),
    "ru": (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø <b>CryptoGuard</b>.\n\n"
        "–ß—Ç–æ —É–º–µ—é:\n"
        "‚Ä¢ –¥–µ–ª–∞—Ç—å –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–æ–≤/–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)\n"
        "‚Ä¢ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ü—Å–µ—Ç–∏ (Twitter/X, Discord) –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å GitHub\n"
        "‚Ä¢ –æ—Ç–º–µ—á–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ Web3-—Ä–∏—Å–∫–∏ (honeypot, —Ñ–µ–π–∫–æ–≤—ã–µ –º–∏–Ω—Ç–∞/–∞–¥–º–∏–Ω-—Ä–∏—Å–∫–∏)\n"
        "‚Ä¢ –æ–±—ä—è—Å–Ω—è—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º –∏ –¥–∞–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"
        "–ü—Ä–∏—à–ª–∏ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞/CA, —Å–∞–π—Ç –∏–ª–∏ –≤–æ–ø—Ä–æ—Å."
    ),
    "tr": (
        "üëã Merhaba! Ben <b>CryptoGuard</b>.\n\n"
        "Neler yaparƒ±m:\n"
        "‚Ä¢ token/kontrat i√ßin temel kontroller (salt okunur)\n"
        "‚Ä¢ sosyal aƒü taramasƒ± (Twitter/X, Discord), GitHub aktivitesi\n"
        "‚Ä¢ yaygƒ±n Web3 risklerini i≈üaretleme\n"
        "‚Ä¢ a√ßƒ±k dille riskleri anlatma ve kaynaklar\n\n"
        "Bir token adresi/CA, web sitesi veya sorunuzu g√∂nderin."
    ),
    "ar": "üëã ÿ£ŸáŸÑÿßŸã! ÿ£ŸÜÿß <b>CryptoGuard</b>‚Ä¶ ÿ£ÿ±ÿ≥ŸÑ ÿπŸÜŸàÿßŸÜ ÿßŸÑÿπŸÇÿØ/ÿßŸÑŸÖŸàŸÇÿπ ÿ£Ÿà ÿ≥ÿ§ÿßŸÑŸÉ.",
    "zh": "üëã ‰Ω†Â•ΩÔºÅÊàëÊòØ <b>CryptoGuard</b>„ÄÇÂèëÈÄÅÂêàÁ∫¶Âú∞ÂùÄ/ÁΩëÁ´ôÊàñÈóÆÈ¢òÂç≥ÂèØÂºÄÂßã„ÄÇ",
}

def get_welcome(lang: str) -> str:
    return WELCOME.get(lang, WELCOME["en"])

# ==== –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ (–º—É–ª—å—Ç–∏—è–∑—ã–∫ + Web3 –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏) ====
SYSTEM_PROMPT = (
    "You are CryptoGuard, a Web3 risk assistant. "
    "Capabilities: liquidity/volume sanity-checks; social checks (Twitter/X, Discord); "
    "GitHub activity; contract/read-only audits; common Web3 red-flags. "
    "You DO NOT run transactions or give financial advice. "
    "When the user writes in some language, ALWAYS answer in that language. "
    "Be concise unless asked for details. If user sends a link or CA address, "
    "explain potential risks and what to verify (owner privileges, mint, taxes, liquidity locks), "
    "and suggest public sources (Etherscan/BscScan/Solscan, DexScreener, DEXTools, DeFiLlama, RugDoc)."
)

# ==== ROUTES ====
@app.route("/", methods=["GET"])
def root():
    return "ok"

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json(force=True, silent=True) or {}
    msg = data.get("message") or data.get("edited_message") or data.get("channel_post")
    if not msg:
        return "ok"

    chat_id = msg["chat"]["id"]
    user_lang = (msg.get("from") or {}).get("language_code", "en")[:2]
    text = (msg.get("text") or msg.get("caption") or "").strip()

    # /start
    if text.lower().startswith("/start"):
        lang = detect_lang(text) or (user_lang or "en")
        bot.send_message(chat_id=chat_id, text=get_welcome(lang), parse_mode="HTML")
        return "ok"

    # –û–ø—Ä–µ–¥–µ–ª–∏–º —è–∑—ã–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    lang = detect_lang(text) or (user_lang or "en")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user",   "content": f"[language:{lang}] {text}"}
    ]

    try:
        resp = client.chat.completions.create(
            model="llama-3.1-70b-versatile",  # –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∫—Ä—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å Groq
            messages=messages,
            temperature=0.4,
            max_tokens=900,
            top_p=1.0,
        )
        reply = (resp.choices[0].message.content or "").strip()
        if not reply:
            reply = "‚ö†Ô∏è Empty response. Try asking again."
    except Exception as e:
        reply = f"Error: {e}"

    bot.send_message(chat_id=chat_id, text=reply, parse_mode=None)
    return "ok"

if __name__ == "__main__":
    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –∑–∞–ø—É—Å—Ç–∏—Ç gunicorn)
    app.run(host="0.0.0.0", port=PORT, debug=False)
